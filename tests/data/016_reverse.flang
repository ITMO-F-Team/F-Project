(func reverseTailRec (list acc)
  (cond (isnull list)
    acc
    (reverseTailRec (tail list) (cons (head list) acc))
  )
)

(func reverse (list)
  (reverseTailRec list '())
)

(func compareLists (firstList secondList)
  (cond (and (isnull firstList) (isnull secondList))
    true
    (cond (or (isnull firstList) (isnull secondList))
      false
      (cond (nonequal (head firstList) (head secondList))
        false
        (compareLists (tail firstList) (tail secondList))
      )
    )
  )
)


(assert (equal (compareLists '() (reverse '())) true))
(assert (equal (compareLists '(1) (reverse '(1))) true))
(assert (equal (compareLists '(1 2) (reverse '(2 1))) true))
(assert (equal (compareLists '(1 2 3) (reverse '(3 2 1))) true))
(assert (equal (compareLists '(1 2 3 4 5) (reverse '(5 4 3 2 1))) true))
